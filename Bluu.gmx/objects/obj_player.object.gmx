<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PLAYER CREATE CODE

//INITIALIZE VARIABLES
grav = 0.35;
hsp = 0;
vsp = 0;
hsp_carry = 0;
move_speed_normal = 3.5;
move_speed_boosted = 6;
move_speed = move_speed_normal;
jump_speed = 7.5;
jumps = 0;
jumps_max = 2;
air_jump_speed = 6;

img_speed = 0.4;

can_advance_level = true;
player_dead = false;
powerup = false;







//PARTICLES
Sname = part_system_create();

particle1 = part_type_create();
part_type_shape(particle1,pt_shape_square);
part_type_size(particle1,0.05,0.05,0,0);
part_type_scale(particle1,1,1);
part_type_color1(particle1,make_color_rgb(38,48,198));
part_type_alpha1(particle1,1);
part_type_speed(particle1,5,12,0,0);
part_type_direction(particle1,30,150,0,0);
part_type_gravity(particle1,0.30,270);
part_type_orientation(particle1,0,0,0,0,0);
part_type_blend(particle1,0);
part_type_life(particle1,50,50);

particle2 = part_type_create();
part_type_shape(particle2,pt_shape_square);
part_type_size(particle2,0.05,0.05,0,0);
part_type_scale(particle2,1,1);
part_type_color1(particle2,make_color_rgb(38,48,198));
part_type_alpha1(particle2,1);
part_type_speed(particle2,1,2,0,0);
part_type_direction(particle2,0,359,0,0);
part_type_gravity(particle2,0.10,90);
part_type_orientation(particle2,0,0,0,0,0);
part_type_blend(particle2,0);
part_type_life(particle2,20,40);



//MISCELLANEOUS

newfont = font_add( 'coders_crux', 12, true, false, 32, 128);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>emitter2 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter2,obj_player.x+4,obj_player.x-4,obj_player.y+4,obj_player.y-4,0,0);
part_emitter_burst(Sname,emitter2,particle2,2);
if(powerup){
    alarm[2] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Return speed to normal

powerup = false;
move_speed = move_speed_normal;
img_speed = 0.4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Player's input
key_right = keyboard_check(ord('D'));
key_left = keyboard_check(ord('A'));
key_down = keyboard_check(ord('S'));
key_jump_held = keyboard_check(ord('W'));
key_jump = keyboard_check_pressed(ord('W'));

//Move based on inputs
move = -key_left + key_right;
hsp = move * move_speed;
if (vsp &lt; 10){
    vsp += grav;
}
if (place_meeting(x,y+1,obj_wall)){
    jumps = jumps_max;
}

if (key_jump &amp;&amp; (jumps &gt; 0)){
    if(jumps &lt; jumps_max){
        vsp = -air_jump_speed;
    }
    else{
        vsp = -jump_speed;
    }
    jumps -= 1;
}

if ((vsp &lt; 0 ) &amp;&amp; (!key_jump_held)){
    vsp = max(vsp,(-jump_speed/2));
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_wall)){
    while(!place_meeting(x+sign(hsp_final),y,obj_wall)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;


//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;



//Animations for movement
image_speed = img_speed;
if(key_down){
    sprite_index = spr_player_down;
}
if (move != 0){
    image_xscale = move;
}
if (place_meeting(x,y+1,obj_wall)){
    if (move != 0){
        sprite_index = spr_player_walk;
    }
    else{
        sprite_index = spr_player_idle;
    }
}
else{
    if (vsp &lt; 0){
        sprite_index = spr_player_jump;
    }
    else{
        sprite_index = spr_player_fall;
    }
}
if(key_down){
    sprite_index = spr_player_down;
}

//Collision with Spikes
if (place_meeting(x,y,obj_spike_up)){
    player_dead = true;
}

//Collision with Speed Boost
if (place_meeting(x,y,obj_speed_boost)){
    move_speed = move_speed_boosted;
    img_speed = 0.6;
    alarm[1] = 60;
    alarm[2] = 2;
    powerup = true;
}

//Player death
if (player_dead){
    alarm[0] = 60;
    emitter1 = part_emitter_create(Sname);
    part_emitter_region(Sname,emitter1,obj_player.x+4,obj_player.x-4,obj_player.y+4,obj_player.y-4,0,0);
    part_emitter_burst(Sname,emitter1,particle1,50);
    instance_destroy();
    instance_create(x,y,obj_fade_restart_room);
}

//goal
if (key_down){
    if(place_meeting(x,y,obj_goal) &amp;&amp; can_advance_level){
        instance_create(x,y,obj_fade_next_room);
        // Delay so they can't press S over and over to advance more than one level.
        can_advance_level = false;
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
